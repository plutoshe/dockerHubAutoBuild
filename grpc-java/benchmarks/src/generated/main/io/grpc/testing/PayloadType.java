// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qpstest.proto

package io.grpc.testing;

/**
 * Protobuf enum {@code grpc.testing.PayloadType}
 */
public enum PayloadType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>COMPRESSABLE = 0;</code>
   *
   * <pre>
   * Compressable text format.
   * </pre>
   */
  COMPRESSABLE(0, 0),
  /**
   * <code>UNCOMPRESSABLE = 1;</code>
   *
   * <pre>
   * Uncompressable binary format.
   * </pre>
   */
  UNCOMPRESSABLE(1, 1),
  /**
   * <code>RANDOM = 2;</code>
   *
   * <pre>
   * Randomly chosen from all other formats defined in this enum.
   * </pre>
   */
  RANDOM(2, 2),
  UNRECOGNIZED(-1, -1),
  ;

  /**
   * <code>COMPRESSABLE = 0;</code>
   *
   * <pre>
   * Compressable text format.
   * </pre>
   */
  public static final int COMPRESSABLE_VALUE = 0;
  /**
   * <code>UNCOMPRESSABLE = 1;</code>
   *
   * <pre>
   * Uncompressable binary format.
   * </pre>
   */
  public static final int UNCOMPRESSABLE_VALUE = 1;
  /**
   * <code>RANDOM = 2;</code>
   *
   * <pre>
   * Randomly chosen from all other formats defined in this enum.
   * </pre>
   */
  public static final int RANDOM_VALUE = 2;


  public final int getNumber() {
    if (index == -1) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  public static PayloadType valueOf(int value) {
    switch (value) {
      case 0: return COMPRESSABLE;
      case 1: return UNCOMPRESSABLE;
      case 2: return RANDOM;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<PayloadType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static com.google.protobuf.Internal.EnumLiteMap<PayloadType>
      internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PayloadType>() {
          public PayloadType findValueByNumber(int number) {
            return PayloadType.valueOf(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(index);
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.grpc.testing.QpsTestProto.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final PayloadType[] VALUES = values();

  public static PayloadType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int index;
  private final int value;

  private PayloadType(int index, int value) {
    this.index = index;
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:grpc.testing.PayloadType)
}

