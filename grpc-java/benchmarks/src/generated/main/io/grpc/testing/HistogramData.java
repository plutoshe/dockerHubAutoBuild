// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qpstest.proto

package io.grpc.testing;

/**
 * Protobuf type {@code grpc.testing.HistogramData}
 */
public  final class HistogramData extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:grpc.testing.HistogramData)
    HistogramDataOrBuilder {
  // Use HistogramData.newBuilder() to construct.
  private HistogramData(com.google.protobuf.GeneratedMessage.Builder builder) {
    super(builder);
  }
  private HistogramData() {
    bucket_ = java.util.Collections.emptyList();
    minSeen_ = 0D;
    maxSeen_ = 0D;
    sum_ = 0D;
    sumOfSquares_ = 0D;
    count_ = 0D;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private HistogramData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              bucket_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            bucket_.add(input.readUInt32());
            break;
          }
          case 10: {
            int length = input.readRawVarint32();
            int limit = input.pushLimit(length);
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
              bucket_ = new java.util.ArrayList<java.lang.Integer>();
              mutable_bitField0_ |= 0x00000001;
            }
            while (input.getBytesUntilLimit() > 0) {
              bucket_.add(input.readUInt32());
            }
            input.popLimit(limit);
            break;
          }
          case 17: {

            minSeen_ = input.readDouble();
            break;
          }
          case 25: {

            maxSeen_ = input.readDouble();
            break;
          }
          case 33: {

            sum_ = input.readDouble();
            break;
          }
          case 41: {

            sumOfSquares_ = input.readDouble();
            break;
          }
          case 49: {

            count_ = input.readDouble();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        bucket_ = java.util.Collections.unmodifiableList(bucket_);
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.grpc.testing.QpsTestProto.internal_static_grpc_testing_HistogramData_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.grpc.testing.QpsTestProto.internal_static_grpc_testing_HistogramData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.grpc.testing.HistogramData.class, io.grpc.testing.HistogramData.Builder.class);
  }

  private int bitField0_;
  public static final int BUCKET_FIELD_NUMBER = 1;
  private java.util.List<java.lang.Integer> bucket_;
  /**
   * <code>repeated uint32 bucket = 1;</code>
   */
  public java.util.List<java.lang.Integer>
      getBucketList() {
    return bucket_;
  }
  /**
   * <code>repeated uint32 bucket = 1;</code>
   */
  public int getBucketCount() {
    return bucket_.size();
  }
  /**
   * <code>repeated uint32 bucket = 1;</code>
   */
  public int getBucket(int index) {
    return bucket_.get(index);
  }
  private int bucketMemoizedSerializedSize = -1;

  public static final int MIN_SEEN_FIELD_NUMBER = 2;
  private double minSeen_;
  /**
   * <code>optional double min_seen = 2;</code>
   */
  public double getMinSeen() {
    return minSeen_;
  }

  public static final int MAX_SEEN_FIELD_NUMBER = 3;
  private double maxSeen_;
  /**
   * <code>optional double max_seen = 3;</code>
   */
  public double getMaxSeen() {
    return maxSeen_;
  }

  public static final int SUM_FIELD_NUMBER = 4;
  private double sum_;
  /**
   * <code>optional double sum = 4;</code>
   */
  public double getSum() {
    return sum_;
  }

  public static final int SUM_OF_SQUARES_FIELD_NUMBER = 5;
  private double sumOfSquares_;
  /**
   * <code>optional double sum_of_squares = 5;</code>
   */
  public double getSumOfSquares() {
    return sumOfSquares_;
  }

  public static final int COUNT_FIELD_NUMBER = 6;
  private double count_;
  /**
   * <code>optional double count = 6;</code>
   */
  public double getCount() {
    return count_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getBucketList().size() > 0) {
      output.writeRawVarint32(10);
      output.writeRawVarint32(bucketMemoizedSerializedSize);
    }
    for (int i = 0; i < bucket_.size(); i++) {
      output.writeUInt32NoTag(bucket_.get(i));
    }
    if (minSeen_ != 0D) {
      output.writeDouble(2, minSeen_);
    }
    if (maxSeen_ != 0D) {
      output.writeDouble(3, maxSeen_);
    }
    if (sum_ != 0D) {
      output.writeDouble(4, sum_);
    }
    if (sumOfSquares_ != 0D) {
      output.writeDouble(5, sumOfSquares_);
    }
    if (count_ != 0D) {
      output.writeDouble(6, count_);
    }
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < bucket_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(bucket_.get(i));
      }
      size += dataSize;
      if (!getBucketList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      bucketMemoizedSerializedSize = dataSize;
    }
    if (minSeen_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, minSeen_);
    }
    if (maxSeen_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(3, maxSeen_);
    }
    if (sum_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(4, sum_);
    }
    if (sumOfSquares_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, sumOfSquares_);
    }
    if (count_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(6, count_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static io.grpc.testing.HistogramData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.testing.HistogramData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.testing.HistogramData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.grpc.testing.HistogramData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.grpc.testing.HistogramData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static io.grpc.testing.HistogramData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static io.grpc.testing.HistogramData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static io.grpc.testing.HistogramData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static io.grpc.testing.HistogramData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static io.grpc.testing.HistogramData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.grpc.testing.HistogramData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code grpc.testing.HistogramData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:grpc.testing.HistogramData)
      io.grpc.testing.HistogramDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.grpc.testing.QpsTestProto.internal_static_grpc_testing_HistogramData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.grpc.testing.QpsTestProto.internal_static_grpc_testing_HistogramData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.grpc.testing.HistogramData.class, io.grpc.testing.HistogramData.Builder.class);
    }

    // Construct using io.grpc.testing.HistogramData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      bucket_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      minSeen_ = 0D;

      maxSeen_ = 0D;

      sum_ = 0D;

      sumOfSquares_ = 0D;

      count_ = 0D;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.grpc.testing.QpsTestProto.internal_static_grpc_testing_HistogramData_descriptor;
    }

    public io.grpc.testing.HistogramData getDefaultInstanceForType() {
      return io.grpc.testing.HistogramData.getDefaultInstance();
    }

    public io.grpc.testing.HistogramData build() {
      io.grpc.testing.HistogramData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public io.grpc.testing.HistogramData buildPartial() {
      io.grpc.testing.HistogramData result = new io.grpc.testing.HistogramData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        bucket_ = java.util.Collections.unmodifiableList(bucket_);
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.bucket_ = bucket_;
      result.minSeen_ = minSeen_;
      result.maxSeen_ = maxSeen_;
      result.sum_ = sum_;
      result.sumOfSquares_ = sumOfSquares_;
      result.count_ = count_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.grpc.testing.HistogramData) {
        return mergeFrom((io.grpc.testing.HistogramData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.grpc.testing.HistogramData other) {
      if (other == io.grpc.testing.HistogramData.getDefaultInstance()) return this;
      if (!other.bucket_.isEmpty()) {
        if (bucket_.isEmpty()) {
          bucket_ = other.bucket_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureBucketIsMutable();
          bucket_.addAll(other.bucket_);
        }
        onChanged();
      }
      if (other.getMinSeen() != 0D) {
        setMinSeen(other.getMinSeen());
      }
      if (other.getMaxSeen() != 0D) {
        setMaxSeen(other.getMaxSeen());
      }
      if (other.getSum() != 0D) {
        setSum(other.getSum());
      }
      if (other.getSumOfSquares() != 0D) {
        setSumOfSquares(other.getSumOfSquares());
      }
      if (other.getCount() != 0D) {
        setCount(other.getCount());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.grpc.testing.HistogramData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.grpc.testing.HistogramData) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<java.lang.Integer> bucket_ = java.util.Collections.emptyList();
    private void ensureBucketIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        bucket_ = new java.util.ArrayList<java.lang.Integer>(bucket_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getBucketList() {
      return java.util.Collections.unmodifiableList(bucket_);
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public int getBucketCount() {
      return bucket_.size();
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public int getBucket(int index) {
      return bucket_.get(index);
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public Builder setBucket(
        int index, int value) {
      ensureBucketIsMutable();
      bucket_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public Builder addBucket(int value) {
      ensureBucketIsMutable();
      bucket_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public Builder addAllBucket(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureBucketIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, bucket_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint32 bucket = 1;</code>
     */
    public Builder clearBucket() {
      bucket_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private double minSeen_ ;
    /**
     * <code>optional double min_seen = 2;</code>
     */
    public double getMinSeen() {
      return minSeen_;
    }
    /**
     * <code>optional double min_seen = 2;</code>
     */
    public Builder setMinSeen(double value) {
      
      minSeen_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double min_seen = 2;</code>
     */
    public Builder clearMinSeen() {
      
      minSeen_ = 0D;
      onChanged();
      return this;
    }

    private double maxSeen_ ;
    /**
     * <code>optional double max_seen = 3;</code>
     */
    public double getMaxSeen() {
      return maxSeen_;
    }
    /**
     * <code>optional double max_seen = 3;</code>
     */
    public Builder setMaxSeen(double value) {
      
      maxSeen_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double max_seen = 3;</code>
     */
    public Builder clearMaxSeen() {
      
      maxSeen_ = 0D;
      onChanged();
      return this;
    }

    private double sum_ ;
    /**
     * <code>optional double sum = 4;</code>
     */
    public double getSum() {
      return sum_;
    }
    /**
     * <code>optional double sum = 4;</code>
     */
    public Builder setSum(double value) {
      
      sum_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double sum = 4;</code>
     */
    public Builder clearSum() {
      
      sum_ = 0D;
      onChanged();
      return this;
    }

    private double sumOfSquares_ ;
    /**
     * <code>optional double sum_of_squares = 5;</code>
     */
    public double getSumOfSquares() {
      return sumOfSquares_;
    }
    /**
     * <code>optional double sum_of_squares = 5;</code>
     */
    public Builder setSumOfSquares(double value) {
      
      sumOfSquares_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double sum_of_squares = 5;</code>
     */
    public Builder clearSumOfSquares() {
      
      sumOfSquares_ = 0D;
      onChanged();
      return this;
    }

    private double count_ ;
    /**
     * <code>optional double count = 6;</code>
     */
    public double getCount() {
      return count_;
    }
    /**
     * <code>optional double count = 6;</code>
     */
    public Builder setCount(double value) {
      
      count_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double count = 6;</code>
     */
    public Builder clearCount() {
      
      count_ = 0D;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:grpc.testing.HistogramData)
  }

  // @@protoc_insertion_point(class_scope:grpc.testing.HistogramData)
  private static final io.grpc.testing.HistogramData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.grpc.testing.HistogramData();
  }

  public static io.grpc.testing.HistogramData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  public static final com.google.protobuf.Parser<HistogramData> PARSER =
      new com.google.protobuf.AbstractParser<HistogramData>() {
    public HistogramData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new HistogramData(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<HistogramData> getParserForType() {
    return PARSER;
  }

  public io.grpc.testing.HistogramData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

